# -*- coding: utf-8 -*-
"""PolyFarms

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nuAiYBI9T4zHvZv6Hv-X-hKVa7hv5twt
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv('/content/tripadvisor_hotel_reviews.csv')

data.head()

import re
import string

#This function converts to lower-case, removes square bracket, removes numbers and punctuation
def text_clean_1(text):
    text = text.lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\w*\d\w*', '', text)
    return text

cleaned1 = lambda x: text_clean_1(x)

data['cleaned_description'] = pd.DataFrame(data.Review.apply(cleaned1))
data.head(10)

def text_clean_2(text):
    text = re.sub('[‘’“”…]', '', text)
    text = re.sub('\n', '', text)
    return text

cleaned2 = lambda x: text_clean_2(x)

data['cleaned_description'] = pd.DataFrame(data['cleaned_description'].apply(cleaned2))
data.head(10)

from sklearn.model_selection import train_test_split

Independent_var = data.cleaned_description
Dependent_var = data.Rating

IV_train, IV_test, DV_train, DV_test = train_test_split(Independent_var, Dependent_var, test_size = 0.1, random_state = 225)

print('IV_train :', len(IV_train))
print('IV_test  :', len(IV_test))
print('DV_train :', len(DV_train))
print('DV_test  :', len(DV_test))

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

tvec = TfidfVectorizer()
clf2 = LogisticRegression(solver = "lbfgs")


from sklearn.pipeline import Pipeline

model = Pipeline([('vectorizer',tvec),('classifier',clf2)])

model.fit(IV_train, DV_train)


from sklearn.metrics import confusion_matrix

predictions = model.predict(IV_test)

confusion_matrix(predictions, DV_test)

from sklearn.metrics import accuracy_score, precision_score, recall_score

print("Accuracy : ", accuracy_score(predictions, DV_test))
print("Precision : ", precision_score(predictions, DV_test, average = 'weighted'))
print("Recall : ", recall_score(predictions, DV_test, average = 'weighted'))

sheet = pd.read_csv('PolyFarms.csv')

sheet.head()

import re
import string

#This function converts to lower-case, removes square bracket, removes numbers and punctuation
def text_clean_1(text):
    text = text.lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\w*\d\w*', '', text)
    return text

cleaned1 = lambda x: text_clean_1(x)

sheet['cleaned_description'] = pd.DataFrame(sheet.Description.apply(cleaned1))
sheet.head(10)

def text_clean_2(text):
    text = re.sub('[‘’“”…]', '', text)
    text = re.sub('\n', '', text)
    return text

cleaned2 = lambda x: text_clean_2(x)

sheet['cleaned_description'] = pd.DataFrame(sheet['cleaned_description'].apply(cleaned2))
sheet.head(10)

result = model.predict(sheet['cleaned_description'])

name = ['Result']
df = pd.DataFrame(result, columns = name)

df.loc[df['Result'] == 5, 'Sentiment'] = 'Satisfied'
df.loc[df['Result'] == 4, 'Sentiment'] = 'Happy'
df.loc[df['Result'] == 3, 'Sentiment'] = 'Neutral'
df.loc[df['Result'] == 2, 'Sentiment'] = 'Ok'
df.loc[df['Result'] == 1, 'Sentiment'] = 'Poor'

df

print(round(df.value_counts(normalize=True)*100,2))

yaxis = df['Sentiment'].value_counts()

xaxis = df['Sentiment'].unique()

print("The number views:")
print(yaxis)

print(round(df.value_counts(normalize=True)*100,2))

sc = ((df['Sentiment'] == 'Satisfied').sum()) + ((df['Sentiment'] == 'Happy').sum())
tc = ((df['Sentiment'] == 'Satisfied').sum()) + ((df['Sentiment'] == 'Happy').sum()) + ((df['Sentiment'] == 'Poor').sum()) + ((df['Sentiment'] == 'Ok').sum())

sensc = (sc/tc)*100
print("Sentiment Score for Google Reviews(Satisfied + Happy) : ")
print(sensc)

y = round(df.value_counts(normalize=True)*100,2)
mylabels = ["Satisfied", "Happy", "Poor", "Ok", "Neutral"]

plt.pie(y)
plt.legend(mylabels)

plt.bar(xaxis,yaxis)
plt.title('Views on Google Reviews')

plt.barh(xaxis,yaxis)
plt.title('Views on Google Reviews')

all_words = ' '.join([text for text in sheet['cleaned_description']])
from wordcloud import WordCloud
wordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(all_words)

plt.figure(figsize=(10, 7))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis('off')
plt.title('All reviews')
plt.show()

all_words_posi = ' '.join([text for text in sheet['cleaned_description'][df.Sentiment == 'Satisfied']])

wordcloud_posi = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(all_words_posi)

plt.figure(figsize=(10, 7))
plt.imshow(wordcloud_posi, interpolation="bilinear")
plt.axis('off')
plt.title('Satisfied Word Cloud')
plt.show()